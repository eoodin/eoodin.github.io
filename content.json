{"meta":{"title":"知行悟","subtitle":"立志做哥的我","description":null,"author":"建哥","url":"https://eoodin.github.io"},"pages":[],"posts":[{"title":"Why TDD is difficult","slug":"why-tdd-is-difficult","date":"2017-10-27T16:01:00.000Z","updated":"2017-11-28T01:43:32.573Z","comments":true,"path":"2017/10/28/why-tdd-is-difficult/","link":"","permalink":"https://eoodin.github.io/2017/10/28/why-tdd-is-difficult/","excerpt":"","text":"PreparationComparing with the the way that develop a software without unit test, there are couple of extra topics on table when doing test driven development. Testing harnessTesting harness vary from techniques, because of that most of us will no long write test harness for ourselves in order to save effort and to utilize rich features already made by other people, we have to learn a unit test framework for each technique we touched. I faced two problems after I stepped in JavaScript world, the first is what I touched is too much as a bundle including many technologies new to me. I spent considerable time on getting me clearer, however, when writing unit test for a software based on those, I have to understand what can I do with those dependencies. Another problem is that there are two sub types of the technologies, TypeScript for frontend and javascript for backend, they require different setup. For frontend, Angular already shipped with its own testing harness out of the box, but javascript does not. DependenciesIt is usually hard to manage dependencies will in unit tests, especially for those SUT which is not well designed. It took much time to get me comfortable with the way to have interfaces ready before I could write any implementation. I suppose the same issue will be there in any technology that new to me. Mental modelI am not willing to admit the fact that I go to production code without writing any unit test just because the effect of production code give me feedback I wanted for ensuring I am making progress. Even I could realize that is not correct way, I can easily get in the state. I think the feedback I am expecting will be not that necessary to my brain when I am getting familiar with the technology. So I suppose after playing with Angular couple of months there is a timing that I could turn things on track. FearTDD forced us as developer to think carefully before we could write a single line of production code. But I have been working in casual way for long time, even I understand that the total effort of production code first approach will be higher that TDD approach, It turns into habitual old approach easily. I think the cause for this pattern should be fear, I was afraid of being working on writing tests even design the SUT for long time. I experienced couple of cases while writing unit tests, I found the design needs to be redone after some of unit tests and their production code ready, this was far from refactoring. On contrast, directly writing production code gave me the feeling that I will waste less when I fall into this kind of situation. ConclusionI still believe that TDD is a better approach of software development than direct coding, or later unit tests approach, but TDD is feasible only following criteria met: The SUT is well designed, or could be well designed Developer needs to be familiar with the technology been used Test harness needs to be handy for developers.","categories":[{"name":"web","slug":"web","permalink":"https://eoodin.github.io/categories/web/"}],"tags":[]},{"title":"Angular测试","slug":"angular-testing","date":"2017-10-27T14:40:00.000Z","updated":"2017-11-28T01:43:32.573Z","comments":true,"path":"2017/10/27/angular-testing/","link":"","permalink":"https://eoodin.github.io/2017/10/27/angular-testing/","excerpt":"","text":"Angular测试四大件今年以来Angular变化很多，比较大的一个变化就是文档的质量相比去年有了很大的提高，因此如果是需要系统地学习Angular测试，看官网的帮助是一个最好的选择，它还在不断地更新。这里主要是为了记录一下在为Shelf添加测试的过程和遇到的问题，以备参考。 这里说的是测试，官方文档就是说的测试，包含了单元测试和端到端测试，其中单元测试需要用到的东西有： Karma 这是JavaScript项目常用的单元测试的运行器 Jasmine 这是JavaScript项目广泛采用的单元测试框架，它是一个BDD的框架 Angular测试工具集 这是真正Angular提供用于帮助测试的东西 准备Angular 今年在 @angular/cli 上投入很多，现在官网很多教程都已经采用cli来说明，Shelf也在很早以前就使用cli来管理代码，淌过不少坑。基于CLI的测试准备也相当简单，如果是ng new出来的项目，自动就设置好了，只需要在app/src下写*.spec.ts就可以跑了。 测试类型Angular 把测试分为两类，一类是跟Angular机制无关的，比如Service, Pipe，这类被测对象应该是简单的TypeScript的对象，我们只需按照一般的测试写就行了不需要用到上面列出的Angular测试工具集。另一类就比较麻烦了，比如Directive, Component这类，因为它们的测试点往往依赖Angular的Change Detection，HTML渲染等。 Angular测试工具集测试工具集提供这些功能 TestBed 用于创建一个用于测试的NgModule环境 ComponentFixture 使用TestBed创建出来的被测对象的封装 .componentInstance即被测对象， .debugElement提供一个操作被测对象的接口，比如检查元素状态 .debugElement.injector.get(UserService)获取injector .detectChanges可以手动检测变动，如果不调用变动不会有效果 .compileCompoennts 配合async可以正常处理外部template和style的component ComponentFixtureAutoDetect 配置TestBed时将之放入provider里，除直接修改component field不生效外，可以实现自动Change Detection（因为它hook timer等async调用） async 把传beforeEach setup包上async，框架会把它测试放入一个zone，异步执行后续的boforeEach和测试 Angular模块测试处理依赖 TestBed.configureTestingModule({ declarations: [ WelcomeComponent ], // providers: [ UserService ] // NO! Don't provide the real service! // Provide a test-double instead providers: [ {provide: UserService, useValue: userServiceStub } ] }); 访问依赖被注入的依赖是一个clone，访问useValue的直接引用没有效果 TBC..","categories":[{"name":"web","slug":"web","permalink":"https://eoodin.github.io/categories/web/"}],"tags":[]},{"title":"致我们的汉字","slug":"to-han-char","date":"2017-10-23T13:57:00.000Z","updated":"2017-11-28T01:43:32.573Z","comments":true,"path":"2017/10/23/to-han-char/","link":"","permalink":"https://eoodin.github.io/2017/10/23/to-han-char/","excerpt":"","text":"简体字首先我是反对简体字的。现行的简体字（一简）是个半成品，而且是很多地方缺少系统设计的半成品，而三简被叫停，二简也废除了说明制定文字规范的顶层集体也不笃信汉字简化是个好的方向。我所了解的简化字的几个优点： 易写 这恐怕是很多人支持简体字最大的原因，简体字很多地方确实把笔画简省很多，比如前阵子湾湾们拿出来对比的“忧郁的台湾乌龟”。。。","categories":[{"name":"calligraphy","slug":"calligraphy","permalink":"https://eoodin.github.io/categories/calligraphy/"}],"tags":[]},{"title":"一年小结","slug":"calligraph-summary","date":"2017-10-11T15:20:00.000Z","updated":"2017-11-28T01:43:32.573Z","comments":true,"path":"2017/10/11/calligraph-summary/","link":"","permalink":"https://eoodin.github.io/2017/10/11/calligraph-summary/","excerpt":"","text":"时间 从2016年9月开始练字以来时间已经过了一年，是的，只是时间过了一年，而我练字并没有持续一年。除掉一些节假日偶有荒废外，从2月底到5月底，三个月的时间全家生活在工地里—我在做家俱，这期间没办法练字。在其余时日里，大概每一两日会写上一次，每次长短不定，长的有四五个小时，短的二十分钟。影响时间长短的主要因素是情绪，或是没心情或是较上劲了都不宜强练。其次是体力，写久了手酸体乏效果渐差只能作罢。总结一下，按平均两天一次，每次半小时计，大约70小时，真的是很少。 字体 开始的两个月都是看着田蕴章老师的《每日一题-每日一字》的节目写，自然字体也是“田体”。该节目共365集，每晚得看好几集，感觉是消化不了，但被急迫的心情驱使，几乎是走马观花地看过来的，“田体”的临习也基本到此结束了。 这是2106年10月写的单字 这是12月尝试的通临 田体主要源自欧体，而欧体是四大楷书中法度、结构最严谨的字体，自己希望打个好的基础，于是打算从欧体开始。田老师也多次提到他的字体并非欧阳询所书原貌，而临习对象更应是欧阳询所出，于是开始临《九成宫》。《九成宫》凡六百余字，除少数残缺不可临外，数量对初学来说还是算大的，其实也就在几天前我才完整的临完它。 九成宫 除了临《九成宫》外，今年8月开始偶尔临写下智勇草书千字文，除了尝“旧”外，实为常被草字难住而无法读懂书法作品的文意。之后的时间里偶尔会临一些欧阳询的行书，就是那本《千字文》，网上多有人怀疑此帖并非欧阳询手出，经过一年多对其《九成宫》临习，也感觉这本行书少有《九成宫》的稳重，倒是更加险峻。不过反正我是爱好而并非一定得习得正宗，也就照临习数页。 近一个月加入了《集王羲之圣教序》，刚开了个头，虽然是集字，虽然失真，但是那字形、笔法、疏密、体态让我越临越觉震撼。难怪被尊为书圣！总体来说，经过一本《九成宫》大半年的临习，现在慢慢开始学习行草书，行书走王羲之，草书走智勇，也参考孙过庭、怀素。 再说说我“看看就算了”的字体。 颜体，不知道为何，就是不喜欢，不喜欢那肥肥的感觉。但是欧、赵、柳这三体在写大号字，比如牌匾时，明显单薄了些，不如颜体好看。所以今后要有机会练习榜书时再去参考吧。 赵体，赵孟頫的楷书在我看来既继承了晋唐楷书的法度，又有自己舒适畅快的字形，也更接近于现代人的审美，等以后有精力了再学习吧。 隶书、魏碑， 这个书体基本没有实用价值了仅存在于书法作品中，我一个书法爱好者真难于将之排上学习日程。 金文、大篆， 这两体没什么“书”法可讲、都是画线，至于现在有很多篆书书法作品，我觉得已经脱离古意甚远，我不想临习，偶尔看看就好。 小篆，这个和金文、大篆类似，但他是第一个统一的文字系统，而且是其后书体的祖宗，很有学习的必要，是学习，而非临习，能认能写出来就是我最高追求了。 学习用具 前前后后买了很多东西，主要是笔和帖，另外笔架、砚、墨不一而足，这里主要说说帖、笔和纸吧。 帖的选择基本按着少、靠谱的原则买的，至于类型，没有遵照田老师的指导买原大的字帖，原因是：太难找了。我约摸觉得就没有出版社出原大的《九成宫》，因为原石上的字大概2~3厘米，这么大的字在字帖上看起来实在是小。但是呢，只要我们写的时候知道它原大是多少，背临阶段写几个原大的感受一下就好。 加起来估计买了20多 支笔，现在笔架上还剩下9支，其它的都扔掉了。最便的6块，最贵的60，再贵的实在下不了手。除开质量、性价比的因素，笔和人，笔和字是有缘分的。比如同一支笔，我觉得好写，另一个人也许并不觉得好写，这跟个人用笔方法、习惯有关，另外不同的笔也会更适合写不同的字体。经过这么多笔的实践，我发现对我来说细光锋纯羊毫是最适合写欧体的，出锋4cm左右写6cm的字非常趁手。行草书的话我觉得兼毫或者狼毫更好，因为笔的弹性这时就更重要了。这20多支笔里，留下最多的来自三个笔庄：云逸斋、汉正、元锋堂，还有一支大明笔庄的。其中汉正最便宜，性价比最高，云逸斋价高质优、大明笔庄居其间。 最开始买一刀带格毛边纸和4刀4开宣纸起步练习，之后主要使用宣纸，兼以毛边纸。宣纸是从半生成生，不用熟宣，个人感觉熟宣没有洇墨的效果，笔在纸上的速度完全不影响字的外形， 这对于练习笔法的节奏和流畅性有很大影响。 水写布。。。嗯买了好几张终于得出结论：歪道，不易取。 笔法 古代书论很多，也很玄，少有名家有清楚的叙述。这其中可能的原因有很多，其中比较有理的是密技说、圈子说和更替说。 晋唐是书法的高峰，从钟繇到卫夫人、王羲之甚至之后的怀素，智勇，这些人都能理出一个师从或血缘关系，不得不让人怀疑书法的“法”是他们只授至亲或爱徙，而旁人纵临池终身也难有他们的成就。 唐太宗办的书法班前后三届，有虞世南、欧阳询、禇遂良这样的书法大家担当班主任，学生六七十人全是从官宦家精挑具有潜质的少年才俊。这样一个皇帝主导，大牛担纲的书法班竟没能出一个书法大家。 我们有的是什么呢，《笔阵图》、《永字八法》、《三十六法》、《书谱》。。。这些有些只是基本的写自规则、有些晦涩难懂。不过作为初学，先把基本的东西学到才是紧要的。 由于我主要写欧体，欧体笔法比较单一，没有太多变化，永字八法基本够用。以后学习深入了再研究其它笔法。 现在书法怎么了看《每日一题每日一字》时，常听田老师讲现在的书坦风气不好，没有经历过，也不敢轻信，但确实看到过”丑书“、”今楷“之类的东西在网上。 现在书法有个严重的问题是我们每一个人很难有古人那么多的时间去练习，书法这个东西大半是练出来的，古人从入塾到入仕几乎每天都要练习，现代人，哪怕是书法家，还要应付各种应酬、大大小小的锁事，很难有古人那么多的时间。我们也没有那种氛围。 另外书法的字外工也难与古人相比，我们大多数人四书五经都没学完，更别提完整的经史子集、诗词韵律。现在我看到朋友圈有人晒打油诗，不管写的如何，我都要点赞。恐怕今后鲜有人会写一首符合平仄、韵律、对仗要求的律诗了。。 关于学养学养其实正是上面说到的”字外工”。田老师讲过一个中国书协主席的故事比如有意思，他受邀写一幅字，内容是“有凤来仪”，结果写成了“有风来仪”，被指出后还辨称，有风凤才能飞来云云。这不仅反映了他学识不够，更反映了其修养的欠缺。 在写字之余，我想我应该读更多的书，不想有一天心血来潮想写几个字时，只能写“我很高兴”这种无赖。 关于时间时间是现在最缺的东西 ，技术上还有很多东西需要学习，儿子也需要管教，还有很多其它爱好，自己的小项目也缺人力。 我觉得下一阶段需要把自己有的时间重新规划一下，应该放弃一些东西，而让进行的东西有一些结果。","categories":[{"name":"calligraphy","slug":"calligraphy","permalink":"https://eoodin.github.io/categories/calligraphy/"}],"tags":[]},{"title":"小公司，大公司两个极端","slug":"giant-and-small-company-worlds-apart","date":"2013-06-08T16:20:00.000Z","updated":"2017-11-28T04:42:27.302Z","comments":true,"path":"2013/06/09/giant-and-small-company-worlds-apart/","link":"","permalink":"https://eoodin.github.io/2013/06/09/giant-and-small-company-worlds-apart/","excerpt":"","text":"毕业后去的第一家公司全球共１万６千人，还算个大公司，之后经朋友介绍进入一家小公司，全职工作的７、８个人，一年后又到了一家大公司，全球６万多人，期间经历了很多事情，最近让我不能平静的，是大公司和小公司的差别！ 刚刚到这边一个星期，还处于熟悉阶段，据说入职培训还得等两周。而我这两天看了些相关培训的资料，其内容也相当有限，仅限于公司价值、人力资源、考评、福利等的介绍，几乎一个下午就可以把这些资料过完，还能完成一些在线课程，从刚刚一种节奏很快，事情很杂很多的工作切换过来，还真担心这样是不是太无聊了。早听说过公司对subcontractor的人要求很多，对自己员工要求很少，以为是说着玩，但这会还真有种感觉。回想去年二月刚进小公司，和老板一起去挑桌椅、上京东买电脑、组网、搭服务器、招人、写项目wiki等资料， 好巨大的差别。而对新进员工的培训，或者说是介绍工作内容往往只需要一个下午。 下午公司出了个粽子事件：有同事拿着公司发放的粽子劵到店里去领时被告知劵是假的，事情闹到工会，气氛比较紧张，大家情绪也比较激动。看完他们洋洋洒洒的中文邮件，我有种长者的淡定：舒服日子过久了吧? 公司哪个人一下午的情绪才值几个粽子钱? 这些，加上前几天看的一些行业的分析文章，了解到一些事实，从11年到12年，移动互连网飞速发展，COS(Comunication over Software)的兴盛，运营商面临着BOT（Ball on Top)的杯具，而作为电信运营商设备、服务供应链上的我们，出路在哪里呢? 这几天看过了公司的战略，MBB是我们的主要方向，然而，即使能做到第一第二，到将来仍然免不了要面临现在有线、2G、3G网络面临的问题。而同事们，几个粽子就这样重要吗? 有点点觉得这样的逻辑有点扯，可是这也恰恰是我写这篇日志的一个最大动因。假如你们都在小公司待过，你们都懂得市场的残酷，你们都惜时如金，粽子，真的没啥，虽然我也没有。呵。 听闻前面一个同事去了一家小公司，我想了好几分钟也想不出要给他说什么，只是问了下，为什么不考虑大公司了。可是我好想说，去小公司，需要勇气，起码大部分小公司是需要的，我只去过一个，也只听闻过一些，也许没有普遍意义，但我相信小公司的矛盾是共通的。具体点，也许就是，你的学习空间很大，然而你却很难深入；你能做的事情很多，却无法专心；你工作非常充实，却失去了许多自己和家人的时间。除了这些不尽如人意的地方外，小公司里，你可以把自己发挥到极致，也可以直接告诉老板你的想法，直接左右公司的发展，甚至接过公司的方向舵，而它的成长会给你带到别处所找不到的成就感。人都是有自我实现的需求的，如果在大公司，你能带领一个团队把一个产品做得非常出色，自己获得晋升，团队得以成长壮大是一种成功，但是你绝对没有在小公司把公司的业务做大，从投资阶段到盈利阶段那种快感（虽然我也是猜的），因为这其中存在一种内心对自己能力实现的判断标准。在大公司里，你会下意识的觉得自己的成功，得到了公司上上下下，各种人和资源的帮助，所以成功之中自己的功劳就打了折扣。 所以大公司小公司选择上还是因人而异比较好，还有，选择小公司时，对于前景的判断要好，自己认可其前景是一个前提，否则小公司将失去大部分优势。而选择大公司更要看其前景，因为除非你是去做高管，否则，很难影响公司的发展。 本想好好写点东西，由于日志几乎变成了“年志”，语言也不太会组织了，希望以后能多写一些。 前面一段时间，人累了，也懒了，还有好几件事情都没有做，一是写下这一年多的经历作为一个总结，一个对自己的交代，二是给Illkka回那封邮件，想到明年他就会到HongKong做他的事业，并提到对我们的东西感兴趣，不认真的介绍一下也对不起曾经老板的老板对我，以及对我们做的事情的关注了。 我想，此时我所想到最好的打算就是尽快熟悉公司的一切，多把自己的“剩余价值”贡献出来，谁也没法阻挡历史车轮的前进，我们能做的只有努力和坦然面对。MBB，OSS，我来了！","categories":[],"tags":[]},{"title":"几年前给学弟学妹写的一些建议","slug":"suggestions-given-to-college-freshmen","date":"2012-07-19T04:55:00.000Z","updated":"2017-11-28T08:53:42.370Z","comments":true,"path":"2012/07/19/suggestions-given-to-college-freshmen/","link":"","permalink":"https://eoodin.github.io/2012/07/19/suggestions-given-to-college-freshmen/","excerpt":"","text":"在查找一封邮件时看到几年前的一封邮件，给学弟学妹们的一些建议，感慨啊。 给计算机专业学弟学妹们的18点建议 不要胡乱相信别人的建议。 别人的建议不一定适用于你，人在任何时候都应该有自己的思想。无论你抱着怎样的想法来到大学的校园，此时你在这里那么请为自己打算一下，不用很清晰，但一定要有一定的打算。如果你还大一，那么你可以考虑是否要走本专业的路；如果是大二大三那么你一定要想好自己的专业方向；如果你已大四，就没有必要看这些建议了，自己闯吧。 要努力 计算机专业不是一个贪玩也能学好的专业。如果你的智商超过120那么你平均每天用一个小时给自己充电就足够了。 要正确认识专业课程 计算机专业是一个发展非常快的专业，就算学校每年都更新教材仍然离实际应用相差甚远。因此你需要花时间去涉猎课外知识，如软硬件发展趋势，流行的程序设计、系统开发思想。 虽然专业课程显得老旧，但不意味着它们不重要，相反，这些课程是你进一步学习新知识的基石，请努力学好它们！ 保持一颗好奇的心 兴趣是最好的老师，这句话一点不假。有些同学会说，我选计算机本来就是偶然的，我不感兴趣。我的建议是“既来之则安之”，如果你有条件选择，你就去选择你感兴趣的专业；如果你没有，那么试着培养兴趣吧！好奇是人类的天赋，多问自己几个为什么，在寻求答案的过程中，你会渐渐的由惧怕变为喜欢的。如果你有了好奇心，那么请凡事问个究竟。也许有的问题你暂时无法弄懂，没关系，尽量就行了。能弄懂的，请实践一下，比如写程序解决一些问题。 请与老师保持好关系 由于各种原因，你可能对老师的作用不太重视，甚至批评老师种种不足。但是请记住，对于我们大多数学生，我们的经验远远不如老师，如果你乐于向他们提问，与他们讨论，你们比没有这么做的同学少走很多弯路！同时你会得到很多的思想，这对于你进一步提高非常有用。而且老师大多是乐于为学生解答问题的。当老师对一个问题不清楚时，不要嘲笑，没有人能面面俱到的！ 请虚心向一切可以讨教的人学习 假如你班里有三个“高手”，对于一个问题，他们各自有自己的解决思路，如果他们愿意，你可以虚心向他们讨教。这样他们各自有一个解决思路，而你有三个！当然虚心学习不意味着自己就不用思考，勤动脑，先自己思考后再讨教绝对比直接问别人好的多！讨教时也要注意，别使自己成为“问题人”、麻烦人。 勤思考，勤动手 李开复建议我们在大学期间最少完成十万行代码，我觉得这个非常重要，不在余这个指标本身，而是李开复先生对我们勤动手，勤思考的一种希望。其实要达到这个目标说难不难，说难也确实难。这里有个达到这个指标的建议，尽量做一些系统，学校里常有一些部门需要管理网络，设计网页，开发WEB系统，也有像网络技术小组这样的组织，多参加。在开始也许你什么都不懂，但没有必要惧怕，一切都可以学习！只要你勤动手，勤思考。 学会联想学习 计算机科学是一个体系，比如从最简单的晶体管到门电路，到加法器，到处理器，到计算机系统，到网络，到Internet，这些都是直接或间接联系的，掌握他们联系的实质对于将来分析系统，设计系统非常有用。我们大学四年，最根本的目标应该是建立起计算机专业整个的知识框架，在这个框架里，我们能填多少东西就填多少东西！ 寻找好书 好书的力量是不可忽视的，不好的书只会浪费你宝贵的时间和精力，甚至打击你的自信心，葬送你的兴趣，好书恰好相反，它能带给你更多的惊喜，让你理解更多，学到更多，同时一本好书会让你少走不少弯路。你可以让师兄师姐推荐你所想要学习的方面的书，也可以向老师征询，他们通常会告诉你一些好书，这些大多是他们看了大量好书差书摸索出来的！ 不要好高骛远 千里之行始于足下，特别是计算机专业，它是一个理论与实践紧密结合的专业，不要一味地追求高层次。四年埋头写程序的要比四年都在研究设计模式的人实用得多。当然这里也不建议只埋头写程序，当你的代码量到一定水平后，比如三万行，你可能迫切地需要解决自己设计方面的问题，这时你再学习一些设计模式会相当有帮助，而且有柳暗花明的狂喜之感！但在这之前，请认真地写好每一个程序，如果时间允许，你可以思考不同的解决方法到处理同一个问题。 掌握正确的学习顺序 这点与上一点类似，但这里所说的是学习计算机专业所需要的学习顺序。由于这样那样的原因，可能学校安排的课程不见得合理，比如我们大二时模电、数电同时学，这样在学习门电路之前却没有学习晶体管，很多同学坐飞机了。怎么办呢？提前了解！如果你在大一的时候翻看过大二才学的模电、数电的书本，不需要仔细理解，看个大概就行，你就会明白，数电里讲到的门电路是以晶体管为基础的，那么有的放矢，你就在大二之前把晶体管工作原理搞懂。这里只是一个例子，事实上还有很多类似情况，但总的来说，你需要由简单到复杂，由低级到高级这样的思路来学习。否则你的知识框架只是残垣断壁！ 学习要专博结合 如果你雄心勃勃想成为全能手，放弃你的想法吧，除非你是天才，否则你无法样样精通。挑一两个前景好点的方向去学，这不仅让你学习效率更高，也会在将来增加你的竞争力。 减少游戏时间 适当游戏是可以的，但请记住——玩物丧志！克制自己玩游戏，这里没有什么好的方法推荐，这是培养自制力的一种机会。 认识规范的力量 现在但凡有竞争力的公司，都很强调一个概念“规范”，做软件不等于写程序，写程序也不等于写代码。程序很多时候需要让他人看懂，因此尽量让你的代码清晰，并尽可能的增加注释。如果做软件，请注意你的设计，在编码之前，如果可以尽量把应该有的文档完成，这不仅可以帮助别人理解你的设计，也会方便你在以后返回阅读。 养成使用英文的习惯 英文在计算机领域的重要性我就不再强调了，这里主要说说怎么把英语学习同专业学习联系起来。在低年级，你只需要认真地学习英语课，努力地了解计算机专业的各各方面，在大二、大三时，就需要一定的应用，比如查阅英文文献，上国外的BBS学习等。在写程序和文档中，用一下英文。不要用拼音去给变量起名，如果你确实不知道英文是什么，查词典吧！ 注意生活习惯及锻炼身体 合理安排自己的作息，让自己的生活规律有助于长时间的发挥潜能。计算机专业的同学要熬夜，这似乎是一个“公理”，然而，这里给你的建议是尽量避免熬夜，它对你身体的危害比你想像的大，记住身体是革命的本钱！同时，尽量多参加体育运动，好的身体会让你在未来的竞争中拥有更强的动力！ 提高修养 我们上大学不是技工，我们在大学里不仅要学习专业知识，也要全面提高自己。所以你应该去了解社会、经济、政治、国际时事等。 别忘了结交朋友 大学是一个小社会，在这里，你要认识很多人，他们形形色色，其中有一部分可能成为你未来的同事，也可能在未来的某一天帮上你的大忙。记住“朋友多了路好走”！","categories":[],"tags":[]},{"title":"做两年面试官来最大的失误","slug":"plunkers-in-cruit-ever-made","date":"2011-12-27T12:14:00.000Z","updated":"2017-11-28T04:42:59.582Z","comments":true,"path":"2011/12/27/plunkers-in-cruit-ever-made/","link":"","permalink":"https://eoodin.github.io/2011/12/27/plunkers-in-cruit-ever-made/","excerpt":"","text":"人有失手马有失蹄，我一直觉得犯错是学习的一个很好的方式，然而现实中犯错是有不同代价的，有的错真不应该犯。在继续2011年总结之前先把这事给记下来！ 最近成都几家芬兰公司非常动荡，艾克洛斯关门，迪智也出了什么问题，我们挂在网上几个月的QT工程师招聘都没有Candidates，这两周突然多起来，上周五和这两天，面试了七个左右。上周五下午共面试两个人，因为他们到场时间的关系，中间并没有时间做面试记录。在第二个人面完以后，跟同事看了一下CI系统的一个问题，之后参加了一个项目的Warm up，之后就下班回家了。 这周接着面试接下来的几个人，然后做上对应的面试记录。可对于上周面的两个人，今天，也就是今天，我忘掉了。这个叫Li Tianhao（中文名字就不打了），我只记得部分面试内容了，记录表格里的几句话并没有让我回忆起细节。FLM问我他的情况，我竟然想不起来。我只根据记录下的东西大概说了一下可以留用这个人。 这个结果没有问题，还并没有犯下把一个好的Candidate拒绝掉的严重错误。但是要知道我们技术面试官给的参考直接影响到别人的待遇，甚至在公司的职位。我深深地感觉我犯了个大错误，我在此向这位Candidate道个歉，对不起！ 这是一个警示，在今后的工作中，即使再忙，也需要把对别人重要的信息记录下来。对自己负责，对别人负责！","categories":[],"tags":[]},{"title":"我的2011，我未来的2012（2）","slug":"2012-personal-summary","date":"2011-12-27T08:26:00.000Z","updated":"2017-11-28T08:46:57.690Z","comments":true,"path":"2011/12/27/2012-personal-summary/","link":"","permalink":"https://eoodin.github.io/2011/12/27/2012-personal-summary/","excerpt":"","text":"面完人，咱接着写。d 公司外的事情装空调之后，我主动涨了房租 这个事情我现在也不敢确定，但真的很搞笑，怎么会这样。之前这套房子是900的租金，房东这个半年给涨到950, 然后加了空调，说还要加一百，成了1050，不过后面我给了房东1100一个月，到现在我都还没搞明白我为啥给1100，当时房东都有点迟疑，不过涨了钱他肯定happy也没有说啥。这个事，现在想想有点诡异，我中迷魂香了？？ 岳母给我买衣服 这个已经不是第一次了，我再一次默默地收下了。虽然老是被老婆霸占，但这件厚厚的睡衣还是为我带来了很多个温暖的夜晚啊。 领NOKIA N8 之前公司的政策是公司选择一些手机，我们选择一款，然后ADMIN去买。这样我们其实选择就有限了，比如我们换领那会儿，只有E71和X6，因为前面领的N73早就掉了，买了个E63，这不再弄个E71，搞笑的嘛。偶闻另一个SU有人领三星的，我去打听了一下，直接跟他们SU经理问的哦。他们说要经理批准。之后当然我也就明白鸟，向我老大申请银河系S，老大说我们是NOKIA的项目，还是领NOKIA的好，用N8吧，N8我批。我Ｘ，还限制我，算了，这比起E71和X6已经是天大的进步了，于是同意。后面还补了80大洋（公司只认2500,手机2580）。 买iPhone 4S 四个因素促成我下手，一是换了宽带电信169包月了，有169的话费，包三张卡的。我想就换电信了，但电信是CDMA网络，所以只能换手机用了。二是同事周L，买了个4S 16G，港行。花了5600大洋，在他那里我才算是耍到了传说中的爱疯。确实amazing。三是iPhone 4S 32G的Verizon版，成都包烧号的才4999，比16G港行还便宜几百。另外还可以用电信3G（如果港行用移动卡不能用3G的）。四我需要一个平台来实现一些想法，iPhone的App Store是个好地方。 这里随便骂一下4S, 你那个蛋疼的电池啥时候搞定啊，搞不定也说一声啊，好断了我这念想啊。 升级电脑 08年9月的电脑，明显有点老了，特别是那个蛋疼的主板，我换了新电池，一旦断电时钟就回去了。另外黑苹果也老搞不完美。重起老是闪一下电才重起，担心我的U啊，盘啊这些的，淘宝了一个技嘉P43的板子，加邮费210搞定，后面换了个音箱，150，发烧地弄了个金牌电源花500。今年的电脑就这样花了860升级了，对了那个电源拆了。老主板卖了30大洋。 淘宝消费突破30000 昨天无聊地加了下淘宝上的消费，算交易成功的超过30000了。总计31770元了。 走进坦克世界 这个必须要说一下。耍游戏耍不了少时间啊。曾经把这个游戏推荐给蔡蔡过，让他看看这个模式，以及里面的想法，看能不能用到他们的游戏里去。至少对于我的认识来说，这个模式真的很好，点卡时代已经过去了，看魔兽世界这些还能撑多久！ 开始积累东西 这个源于忘性变大，很多东西过后觉得有用又想不起来。像今天这样写日志应该是一种比较好的方式，可惜大多数时候，我没有这么多时间这样搞，那看到好的东西怎么办？复制到一个地方。但复制到哪里？以后怎么查找？当我发现了EverNote之后，看到曙光了。我直接把东西贴在里面，他们同步到服务器， 我无论在家，在公司，在路上，都可以方便的弄出来看。强大。","categories":[{"name":"family","slug":"family","permalink":"https://eoodin.github.io/categories/family/"},{"name":"life","slug":"family/life","permalink":"https://eoodin.github.io/categories/family/life/"}],"tags":[]},{"title":"强烈谴责CSDN明文保存用户密码","slug":"reproach-plain-text-password-persistence-by-csdn","date":"2011-12-27T02:43:17.000Z","updated":"2017-11-28T03:01:02.462Z","comments":true,"path":"2011/12/27/reproach-plain-text-password-persistence-by-csdn/","link":"","permalink":"https://eoodin.github.io/2011/12/27/reproach-plain-text-password-persistence-by-csdn/","excerpt":"","text":"天道不仁，侠当做仗键而起！ 如徐克所说，我们这一代人，大抵都有一个侠客梦。侠是什么，鄙以为侠是人们对于公平公正，有情有义的一种人际氛围（社会）的追求的一种思想寄托，他也许并不存在，也许存在的侠没有高强的武功，绝顶聪明的头脑，可能被坏人杀掉，可能被官府抓去砍头……不过这些并没有妨碍侠在人们心中的位置，这是因为世间总有不平事，总有需要“侠”的地方。 扯远了，最近这次大规模泄密事件给了我太大的震撼，依稀记得在05年，我第一次做一个用户相关系统的时候，我很自然的使用了md5对用户的密码进行摘要处理（MD5： 一种摘要算法可以使”abc”变成”112833a32ef3d…”这种加密字符，它是单向的，至少在目前的计算条件下想要还原abc非常有难度）。对用户密码加密有多重的好处： 为用户保密 即使网站被攻破，别人拿到加密串仍然没有可能知道你的真实密码。 免除法律责任 我不清楚我国到目前有没有相关的法律法规，但至少在法庭举证时，你能提供未保存用户密码的证据（源代码）。 其它（技术上的好处） 然而我真的很难理解CSDN这类的网站为什么要保存密码明文！ 难道你们这些网站的技术人员，架构师没有一个初学者的常识？ 我认为不是这样的，我所能想到的目的无非有2：分析用，分析用户密码的构成，研究用户密码使用习惯，可能可以做安全相关的产品也可能把分析结果卖给安全类公司。2. 非法目的，这个不详谈。 针对第一个目的，我认为网站经营者太狭隘了，这点蝇头小利值得你去冒牺牲用户信任的风险么？至少我不再信息你们！我确实已经改了密码，而且是我新想的。如果网站能提供给我删除账户的功能，我一定删除！ 如果你们出于第二个目的，我只能说我希望侠出现。。。 PS：本篇与侠并无太大关系，只是心中愤懑而面对强大势力的时候，我们能想到啥呢？侠，你在哪？","categories":[],"tags":[]},{"title":"一年一度的日志？！","slug":"yearly-journal-2011","date":"2011-07-18T10:05:00.000Z","updated":"2017-11-28T03:16:08.450Z","comments":true,"path":"2011/07/18/yearly-journal-2011/","link":"","permalink":"https://eoodin.github.io/2011/07/18/yearly-journal-2011/","excerpt":"","text":"神奇的在等eclipse插件安装的间隙看了下QQ，发现我的QQ上居然写过两篇日志！细看，还有俺小妹的留言曰：一年才写一篇日志。是不是又该写一篇了？因为那篇日志下面赫然写着“一年前”。 上次写的是感性是杀手，不清楚是不是过了整整一年，似乎是比较久了。不知道为什么，时间越过越快，现在一年就这么短了。在这段时间里，我可以自豪地说，我没有在感性的行为上浪费过时间，看电影除外！ 看了小妹的日志，说我“淡漠”，不相信自己的眼睛，在百度词典上输入“淡漠”，找一下有没有比较积极的解释…… 反思一下，这种感觉可能是真实的，我知道，人生不如意十之八九，我又何尝不是呢，只是生活中喜欢扛，过去的经历让我明白：事情不扛，它就过不去，扛过去了就好了。不知为何最近父母对我都突然关心很多，妈妈打电话过来问我感冒好点没，多喝板蓝根……爸爸叫我不要熬夜。细数数，身边所有人对我都是有意见的，只是有的是理解我的。比如爸爸说我老是向着妈妈，妈妈说我对舅舅们冷淡，妹妹觉得我不关心她，老婆觉得我不分担照顾儿子，丈人觉得我没常联系他……工作中也一样，我想很多同事也是有这样或那样的想法。我能说自己做人失败吗？？应该是… 我是一个自大的人，我觉得我应该把什么事情都做好，事实上，很多事情没做好。我想原因绝不是我不想去做，可能是重点放错了。但，“重点”应该是什么呢？相对于家庭，相对于事业，相对于朋友，“重点”是不一样的，我能做的只是对他们加权排序~ 杯具的人啊，杯具的人生","categories":[],"tags":[]},{"title":"招骋点滴","slug":"about-recruiting","date":"2010-09-29T23:42:00.000Z","updated":"2017-11-28T02:56:21.006Z","comments":true,"path":"2010/09/30/about-recruiting/","link":"","permalink":"https://eoodin.github.io/2010/09/30/about-recruiting/","excerpt":"","text":"作为一个面试官，在工作中，会接触到很多问题。于是有了一些体会。 #目标 以及达到目标 在招聘时，面试官的目标是通过有限的时间，最大程度，最公平的从应聘者身上找到公司需要的东西。对于一个IT公司来说，也许是技术能力，也许还包括沟通，英语等等。于是，我给自己制作了一个矩阵，按优先级在左侧排出公司的需求，比如C++，DP，OSS background，另外加上自己希望考查的项，比如学习能力。部分条目可以加入到面试试题中去。这样，在试题完成后，可以将结果并入矩阵。然后根据这些条目，设计一些提问点，不一定是问题，而是一个点，比如const。当面试的时候临时想相关的问题问面试者。 在对方回答之后，做一个评分，并入矩阵。 接着可以将矩阵交给第二轮面试官，他可以在感兴趣的地方提问，也把结果记录到矩阵。 最后，根据考查点不同权重，给一个总体评价，这个评价是基于数值的，而不是描述。当然描述仍然是必须的，数值是我们可以从众多已经面试的人里，很快选出最适合人选。（在中国，没办法，劳动力很多，以我们公司为例，面试/录用比一般在10%以下。。。应届生还要惨点，我毕业后过来，就是400个人最后留下5个） #工具和流程 传统的招聘流程似乎不太能应用到IT。IT的东西，如果不是技术人员去面试，很容易“被骗”，我们遇到过这总情况，从简历看，北大毕业，在IBM GDC（Global Delivery Center）工作多年，项目经历非常好。可是在面试过程中，我们发现此人技术功底很差，最后我们放弃了录用。 技术面试是必要的，而且是重要的。但是我们会遇到一些困难，比如对方的领域我们并不熟悉，或者对方经验并不特别与公司需求对口，对于此类问题，我的想法是：首先，我需要用一定的方法检验他在原项目中的作用，另外我会考查他处理问题的思路。再结合他谈到自己的项目，这样，会有一个大概的认识。 #品质重于技能 我们会遇到一类人，他们有很好的经验，至少从简历上如此，技术能力也不错。但是即使在面试，他们会有蔑视面试官的感觉，这种人我们会怀疑如果把他用到岗位上，会不会有团队合作上的问题。因此我们更倾向于谦逊的人格的应聘都。 最近除了参与面试，也做一些招聘流程的优化，改革工作。希望能做到一个优秀的招聘人员。","categories":[],"tags":[]},{"title":"感性是杀手","slug":"emotion-kills","date":"2010-09-28T16:01:00.000Z","updated":"2017-11-28T03:17:12.902Z","comments":true,"path":"2010/09/29/emotion-kills/","link":"","permalink":"https://eoodin.github.io/2010/09/29/emotion-kills/","excerpt":"","text":"离上一篇日志，都不知道过了几个世纪了。。。要不是今天看看鹏鹏的日志还真不知道什么时候才会来写点东西。 起这个题目确实是一瞬间的感受，其实我相信我是一个感性的人。 曾经是，那时常在日记甚至作文中表露内心点滴，多愁善感。 现在也是，虽然日志都几个月写几百字，虽然访谈中再无儿女情长，天阴月残。 不知为何，在感情的世界，只要思绪进去，就有那么一种力量迫使自己扩大它，我也终于能理解为何有看到落叶就会流泪的人。生命中有一样东西特别宝贵，那就是时间，跟天地万物相比，人的生命，太短暂了。然而感性的人太会花时间在酝酿和释放感性了。我不想死去的时候只给身边的人留下感性的印象。 听过太多的伟大的人的故事，Steve Jobs大概也是感性的人，但是我相信他不会在电脑前边写日志边流泪－－他没有那么多的时间去流泪。 路还长，但是我想我要节约每一秒的时间，特别不能放在情绪上。感性的东西，像毒品一样侵蚀你的生命，像杀手一样结果你的前程和追求。","categories":[],"tags":[]}]}